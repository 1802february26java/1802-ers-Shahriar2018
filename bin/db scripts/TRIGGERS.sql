/********** Triggers **********/

CREATE OR REPLACE TRIGGER USER_B_INSERT
BEFORE INSERT
ON USER_T
FOR EACH ROW
BEGIN
    /* INCREASE SEQUENCE */
    IF :NEW.U_ID IS NULL THEN
        SELECT USER_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
    END IF;

    /* SAVE HASH INSTEAD OF PASSWORD */
    SELECT GET_HASH(:NEW.U_PASSWORD) INTO :NEW.U_PASSWORD FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER REIMBURSEMENT_B_INSERT
BEFORE INSERT
ON REIMBURSEMENT
FOR EACH ROW
BEGIN
    /* INCREASE SEQUENCE */
    IF :NEW.R_ID IS NULL THEN
        SELECT REIMBURSEMENT_SEQ.NEXTVAL INTO :NEW.R_ID FROM DUAL;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER PASSWORD_RECOVERY_B_INSERT
BEFORE INSERT
ON PASSWORD_RECOVERY
FOR EACH ROW
BEGIN
    /* SAVE SPECIAL TOKEN HASH */
    IF :NEW.PR_TOKEN IS NULL THEN
        SELECT GET_HASH((SELECT TO_CHAR(CURRENT_TIMESTAMP,'dd/mm/yyyy hh:mm:SSxFF') FROM DUAL)) INTO :NEW.PR_TOKEN FROM DUAL;
    END IF;

    /* INCREASE SEQUENCE */
    IF :NEW.PR_ID IS NULL THEN
        SELECT PASSWORD_RECOVERY_SEQ.NEXTVAL INTO :NEW.PR_ID FROM DUAL;
    END IF;

    /* DELETE ALL OLD TOKENS */
    DELETE PASSWORD_RECOVERY WHERE U_ID = :NEW.U_ID;
END;
/